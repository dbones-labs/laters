import{_ as a,c as s,o as i,a4 as e}from"./chunks/framework.j5x1Bts0.js";const y=JSON.parse('{"title":"Many For Later - CRON","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"scheduling/many-for-later.md","filePath":"scheduling/many-for-later.md","lastUpdated":null}'),t={name:"scheduling/many-for-later.md"},n=e(`<h1 id="many-for-later-cron" tabindex="-1">Many For Later - CRON <a class="header-anchor" href="#many-for-later-cron" aria-label="Permalink to &quot;Many For Later - CRON&quot;">​</a></h1><p>This allows you to enqueue work which happens multiple times (such as every wednesday), defined use the Cron Syntax</p><p>there are a few commands we can do, here are some to give you a feel of the API.</p><h2 id="manyforlater-configure-dynamically" tabindex="-1">ManyForLater - Configure Dynamically <a class="header-anchor" href="#manyforlater-configure-dynamically" aria-label="Permalink to &quot;ManyForLater - Configure Dynamically&quot;">​</a></h2><p>In any part of your code, within a transaction, you can setup a CRON job</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> midnight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0 0 * * *&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ManyForLater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greetings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },  midnight)</span></span></code></pre></div><p>once a CRON job has been created, it will initiate the first job (which will be delayed execution, to the fisrt occourance of the CRON schedule).</p><h3 id="the-payload" tabindex="-1">The Payload <a class="header-anchor" href="#the-payload" aria-label="Permalink to &quot;The Payload&quot;">​</a></h3><p>Similar to ForLater, the payload <code>new Hello { Name = &quot;dave&quot; }</code> in the example, is important as this is passed into the <code>Handler</code>, to prodive it all the information it rquires to execute.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MapHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JobContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //the hello object is passed into the handler, via the JobContext.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="forgetaboutit-removing-the-cron" tabindex="-1">ForgetAboutIt - Removing the CRON <a class="header-anchor" href="#forgetaboutit-removing-the-cron" aria-label="Permalink to &quot;ForgetAboutIt - Removing the CRON&quot;">​</a></h2><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>There is an option to keep or delete orphined tasks, as a CRON will always have 1 task (the next) waiting to be processed.</p></div><p>This will allow you to delete any CRON job you have setup</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ForgetAboutAllOfIt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greetings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,14),h=[n];function l(o,p,r,k,d,c){return i(),s("div",null,h)}const E=a(t,[["render",l]]);export{y as __pageData,E as default};
