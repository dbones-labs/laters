import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.j5x1Bts0.js";const g=JSON.parse('{"title":"ForLater - Fire-Forget and delayed","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"scheduling/for-later.md","filePath":"scheduling/for-later.md","lastUpdated":null}'),t={name:"scheduling/for-later.md"},h=e(`<h1 id="forlater-fire-forget-and-delayed" tabindex="-1">ForLater - Fire-Forget and delayed <a class="header-anchor" href="#forlater-fire-forget-and-delayed" aria-label="Permalink to &quot;ForLater - Fire-Forget and delayed&quot;">​</a></h1><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>Laters</code> checks the datastore every 3 seconds, this can be overriden.</p></div><p>This mechanism allows you to queue work (a single instance) to be processed now on another process/thread, or delay it to laters (to a datetime).</p><p>there are a few commands we can do, here are some to give you a feel of the API.</p><h2 id="forlater-asap" tabindex="-1">ForLater - ASAP <a class="header-anchor" href="#forlater-asap" aria-label="Permalink to &quot;ForLater - ASAP&quot;">​</a></h2><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>the job id is returned, incase you need to reference it</p></div><p>This will queue work to happen as soon as possible.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ForLater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } )</span></span></code></pre></div><h3 id="the-payload" tabindex="-1">The Payload <a class="header-anchor" href="#the-payload" aria-label="Permalink to &quot;The Payload&quot;">​</a></h3><p>The payload <code>new Hello { Name = &quot;dave&quot; }</code> in the example, is important as this is passed into the <code>Handler</code>, to prodive it all the information it rquires to execute.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MapHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JobContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //the hello object is passed into the handler, via the JobContext.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="forlater-delayed" tabindex="-1">ForLater - Delayed <a class="header-anchor" href="#forlater-delayed" aria-label="Permalink to &quot;ForLater - Delayed&quot;">​</a></h2><p>Same as the example before, however we can supply a <code>DateTime</code> of when we want to process the one message.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whenToProcess</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2032</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ForLater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },  whenToProcess)</span></span></code></pre></div><h2 id="forgetaboutit-removing-a-job" tabindex="-1">ForgetAboutIt - Removing a Job <a class="header-anchor" href="#forgetaboutit-removing-a-job" aria-label="Permalink to &quot;ForgetAboutIt - Removing a Job&quot;">​</a></h2><p>using the <code>JobId</code> which is returned from <code>Laters</code> you can delete jobs, as follows:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ForgetAboutIt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(jobId);</span></span></code></pre></div>`,17),l=[h];function n(p,r,o,k,d,c){return i(),a("div",null,l)}const y=s(t,[["render",n]]);export{g as __pageData,y as default};
