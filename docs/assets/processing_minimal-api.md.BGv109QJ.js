import{_ as i,c as s,o as a,a4 as e}from"./chunks/framework.DclLByTZ.js";const E=JSON.parse('{"title":"Minimal Api","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"processing/minimal-api.md","filePath":"processing/minimal-api.md","lastUpdated":null}'),n={name:"processing/minimal-api.md"},l=e(`<h1 id="minimal-api" tabindex="-1">Minimal Api <a class="header-anchor" href="#minimal-api" aria-label="Permalink to &quot;Minimal Api&quot;">​</a></h1><p>This is the machanism in which we apply logic for Job Types (the logic which handles the Job)</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>Laters</code> uses the Job Type in order to select the correct handler. And you should consider using 1 Handler per Job Type.</p></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>Minimal Api</code> is another way to express a JobHandler. Consider this for smaller applications, if you want to split into a number of files see <a href="./job-handler.html">Job Handlers</a></p></div><h2 id="implementing-and-configuring" tabindex="-1">Implementing and Configuring <a class="header-anchor" href="#implementing-and-configuring" aria-label="Permalink to &quot;Implementing and Configuring&quot;">​</a></h2><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Handlers are registered under <code>Scoped</code> with the IoC container.</p></div><p>If a job of Type <code>Hello</code>, as been queued up to be processed</p><p>each action has a few things you need to todo in order to apply logic while processing jobs.</p><ul><li>1️⃣ - Apply <code>MapHandler</code> to setup a Minimal Api <code>JobHandler</code>, this has full suppoty for Dependency Injection <ul><li><code>JobContext&lt;Hello&gt; ctx</code> parameter is the Job context, which you should include</li><li>order of param do not matter</li></ul></li><li>2️⃣ - Impement logic</li><li>3️⃣ - <code>async / await</code> is optional (and supported)</li></ul><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1️⃣</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MapHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JobContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ILogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2️⃣</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jobContext.Payload.Name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogInformation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello {Name}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3️⃣</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Task.CompletedTask;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,10),t=[l];function p(h,o,r,d,k,c){return a(),s("div",null,t)}const m=i(n,[["render",p]]);export{E as __pageData,m as default};
