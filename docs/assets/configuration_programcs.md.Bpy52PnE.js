import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.j5x1Bts0.js";const u=JSON.parse('{"title":"Program.cs","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"configuration/programcs.md","filePath":"configuration/programcs.md","lastUpdated":null}'),t={name:"configuration/programcs.md"},n=e(`<h1 id="program-cs" tabindex="-1">Program.cs <a class="header-anchor" href="#program-cs" aria-label="Permalink to &quot;Program.cs&quot;">​</a></h1><p>the main parts to make <code>Laters</code> works</p><p>Against the <code>HostBuilder</code></p><ul><li>Configure Datastore i.e. <a href="./../storage/postgres.html">Postgres</a></li><li><code>ConfigureLaters</code> - configure Laters with any particular configurations you would like to apply</li></ul><p>Against the <code>ApplicationBuilder</code></p><ul><li><code>UseLaters</code> - add the middleware that laters requires.</li></ul><h2 id="hostbuilder" tabindex="-1">HostBuilder <a class="header-anchor" href="#hostbuilder" aria-label="Permalink to &quot;HostBuilder&quot;">​</a></h2><p>This is where you can setup some core fundimentals of how Laters will work.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">builder.WebHost.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ConfigureLaters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //overide this endpoint to point at your loadbalancer in production/when-deployed.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    setup.Configuration.WorkerEndpoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://localhost:5000/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    setup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UseStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UseMarten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>against the <code>setup</code> object you can</p><ul><li>Register <a href="./../processing/job-handler.html">Handlers</a></li><li>Register <a href="./../processing/custom-actions.html">Custom Client Actions</a></li><li>Register <a href="./../scheduling/global-many-for-later.html">Global Cron Jobs</a></li><li>Register <a href="./../storage/postgres.html">Storage</a></li></ul><h3 id="configuration-object" tabindex="-1">Configuration object <a class="header-anchor" href="#configuration-object" aria-label="Permalink to &quot;Configuration object&quot;">​</a></h3><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Each propery has .NET comments against then.</p></div><p>You can use either the .NET configurtion classes or code to override any default configuraion that Laters uses</p><p><strong>Via code:</strong></p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">builder.WebHost.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ConfigureLaters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    setup.Configuration.Role </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Roles.Leader;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //rest of laters setup</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>Via .NET Config (such as appSettings):</strong></p><p>by calling <code>ConfigureLaters</code> with <code>&quot;Laters&quot;</code>, it will now load the Configuration from .NET Configuration.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>builder.WebHost.ConfigureLaters(&quot;Laters&quot;, (context, setup) =&gt;</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    //override in code</span></span>
<span class="line"><span>    setup.Configuration.Role = Roles.Leader;</span></span>
<span class="line"><span>    //rest of laters setup</span></span>
<span class="line"><span>    //...</span></span>
<span class="line"><span>});</span></span></code></pre></div><h2 id="applicationbuilder" tabindex="-1">ApplicationBuilder <a class="header-anchor" href="#applicationbuilder" aria-label="Permalink to &quot;ApplicationBuilder&quot;">​</a></h2><p>This is where you setup the middleware for <code>Laters</code> to work with <code>Asp.NET</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>app.UseLaters();</span></span></code></pre></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p><code>Laters</code> checks the datastore every 3 seconds, this can be overriden.</p></div><p>This mechanism allows you to queue work (a single instance) to be processed now on another process/thread, or delay it to laters (to a datetime).</p><p>there are a few commands we can do, here are some to give you a feel of the API.</p><h2 id="forlater-asap" tabindex="-1">ForLater - ASAP <a class="header-anchor" href="#forlater-asap" aria-label="Permalink to &quot;ForLater - ASAP&quot;">​</a></h2>`,26),o=[n];function l(p,r,h,c,d,k){return i(),a("div",null,o)}const E=s(t,[["render",l]]);export{u as __pageData,E as default};
